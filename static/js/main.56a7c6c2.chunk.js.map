{"version":3,"sources":["logo.svg","Assets/img/search.svg","Components/SearchBar.jsx","Services/httpService.js","Utilities/Config.js","Services/movieServices.js","Components/MovieItem.jsx","Components/Loader.jsx","Pages/MainPage/MainPage.jsx","Components/WithLoader.jsx","Components/MovieRating.jsx","Pages/MovieDetail/MoviesDetail.jsx","App.js","serviceWorker.js","index.js","Assets/img/loading.gif"],"names":["module","exports","SearchBar","props","className","src","require","alt","type","placeholder","onChange","e","searchMovieProp","target","value","axios","interceptors","request","use","config","headers","error","Promise","reject","response","status","console","get","post","put","delete","CONFIG","baseURL","getMoviesList","querySearch","pageOffset","httpService","MovieItem","data","to","imdbID","Poster","Title","Year","Type","Loader","message","MainPage","useState","movieList","setMovieList","searchQueryState","setSearchQueryState","noData","setNoData","loading","setLoading","pageCount","setPageCount","pageIndex","setPageIndex","timeout","searchQuery","clearTimeout","setTimeout","then","res","Response","Search","parseInt","totalResults","map","item","index","log","key","Pagination","defaultActivePage","activePage","totalPages","onPageChange","WithLoading","WrappedComponent","loadingMessage","isLoading","isComponentLoading","MovieRating","rating","useEffect","Value","includes","Source","Progress","split","total","progress","percent","WithLoader","movieDetail","setMovieDetail","id","match","params","Released","Director","Genre","Actors","Plot","Ratings","App","exact","path","component","MovieDetail","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.56a7c6c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.7994c26c.svg\";","import React from \"react\";\r\nimport './componentStyles.scss';\r\n\r\nconst SearchBar = props => {\r\n    return (\r\n        <div className='search-bar-container'>\r\n            <div className='search-icon'>\r\n                <img src={require('./../Assets/img/search.svg')} alt=\"\"/>\r\n            </div>\r\n            <input type=\"text\" placeholder='search movie, actor, genre & etc' onChange={e => props.searchMovieProp(e.target.value)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import axios from 'axios';\r\n\r\naxios.interceptors.request.use(\r\n    config => {\r\n        config.headers['Content-Type'] = 'application/json';\r\n        return config;\r\n    },\r\n    error => Promise.reject(error),\r\n);\r\n\r\naxios.interceptors.response.use(null, error => {\r\n    const expectedError =\r\n        error.response &&\r\n        error.response.status >= 400 &&\r\n        error.response.status < 500;\r\n\r\n    if (!expectedError) {\r\n        console.error('An Expected Error Occurred');\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n};\r\n","const CONFIG = {\r\n    baseURL: 'http://www.omdbapi.com/?apiKey=9af01761',\r\n};\r\n\r\nexport default CONFIG;\r\n","import httpService from \"./httpService\";\r\nimport CONFIG from \"../Utilities/Config\";\r\n\r\n\r\nexport const getMoviesList = (querySearch, pageOffset) => {\r\n    return httpService.get(`${CONFIG.baseURL}&s=${querySearch}&page=${pageOffset}`)\r\n}\r\n\r\nexport const getMovieDetail = (id) => {\r\n    return httpService.get(`${CONFIG.baseURL}&i=${id}`)\r\n}\r\n\r\n","import React from \"react\";\r\nimport './componentStyles.scss';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst MovieItem = ({data}) => {\r\n    return (\r\n        <Link to={`/movie/detail/${data.imdbID}`} className='movie-item-container'>\r\n            <img src={data.Poster} alt=\"\"/>\r\n            <strong>{data.Title}</strong>\r\n            <span>{data.Year}</span>\r\n            <span>{data.Type}</span>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default MovieItem;","import React from 'react';\r\nimport './componentStyles.scss';\r\n\r\n\r\nconst Loader = ({message}) => {\r\n    return (\r\n        <div className='container-animation'>\r\n            <img src={require('./../Assets/img/loading.gif')} alt=\"\" />\r\n            <strong>{message}</strong>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;\r\n","import React, {useState} from \"react\";\r\nimport './style.scss';\r\nimport SearchBar from \"../../Components/SearchBar\";\r\nimport {getMoviesList} from \"../../Services/movieServices\";\r\nimport MovieItem from \"../../Components/MovieItem\";\r\nimport {Pagination} from \"semantic-ui-react\";\r\nimport Loader from \"../../Components/Loader\";\r\n\r\nconst MainPage = () => {\r\n    const [movieList, setMovieList] = useState([]);\r\n    const [searchQueryState, setSearchQueryState] = useState('');\r\n    const [noData, setNoData] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [pageIndex, setPageIndex] = useState(0);\r\n    let timeout = 0;\r\n    const searchMovieByPage = (e, { activePage }) => {\r\n        setPageIndex(activePage);\r\n        setLoading(true);\r\n        getMoviesList(searchQueryState, activePage).then(res => {\r\n            setMovieList(res.data.Search);\r\n            setLoading(false);\r\n        })\r\n    }\r\n    const searchMovieItem = searchQuery => {\r\n        if(timeout) clearTimeout(timeout)\r\n        timeout = setTimeout(() => {\r\n            setPageIndex(0);\r\n            setSearchQueryState(searchQuery);\r\n            setLoading(true);\r\n            getMoviesList(searchQuery, 1).then(res => {\r\n                if(res.data.Response === 'True'){\r\n                    setMovieList(res.data.Search);\r\n                    setPageCount(parseInt(res.data.totalResults / 10 + 1 ));\r\n                    setNoData(false);\r\n                    setLoading(false)\r\n                }else {\r\n                    setNoData(true);\r\n                    setLoading(false);\r\n                    setPageCount(0)\r\n                }\r\n            })\r\n        }, 500)\r\n    }\r\n    return (\r\n        <div className='container'>\r\n            <SearchBar searchMovieProp={searchMovieItem}/>\r\n            {\r\n                loading ? (\r\n                    <div className='search-loading'>\r\n                        <img src={require('./../../Assets/img/loading.gif')} alt=\"\"/>\r\n                        <strong>Searching Movies...</strong>\r\n                    </div>\r\n                ) : (\r\n                    <>\r\n                        <div className='movie-item-parent'>\r\n                            {\r\n                                !noData && movieList.map((item, index) => {\r\n                                    console.log(pageCount);\r\n                                    return (\r\n                                        <MovieItem key={index} data={item}/>\r\n                                    )\r\n                                })\r\n                            }\r\n                            {\r\n                                noData ? <div className='no-data'><strong>No Movies Found ...</strong></div> : <div></div>\r\n                            }\r\n                        </div>\r\n                        <div className='pagination'>\r\n                            <Pagination defaultActivePage={pageIndex + 1} activePage={pageIndex} totalPages={pageCount} onPageChange={searchMovieByPage}/>\r\n                        </div>\r\n                    </>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import React, { useState } from 'react'\r\nimport Loader from './Loader';\r\n\r\n\r\nexport const WithLoading = (WrappedComponent, loadingMessage) => {\r\n    const HOC = props => {\r\n        const [isLoading, setLoading] = useState(false);\r\n        const setLoadingState = isComponentLoading => {\r\n            setLoading(isComponentLoading)\r\n        }\r\n        return (\r\n            <>\r\n                {isLoading && <Loader message={loadingMessage}/>}\r\n                <WrappedComponent {...props} setLoading={setLoadingState}/>\r\n            </>\r\n        )\r\n    }\r\n    return HOC;\r\n};\r\n\r\nexport default WithLoading;","import React, {useEffect} from \"react\";\r\nimport {Progress} from \"semantic-ui-react\";\r\n\r\nconst MovieRating = props => {\r\n    const calcRating = (rating) => {\r\n        if (rating.Value.includes('/')) {\r\n            // let percent = 0;\r\n            // percent = (parseFloat(rating.Value.split('/')[0]) / parseFloat(rating.Value.split('/')[1])) * 100;\r\n            return (\r\n                <>\r\n                    <div className='rating-title-container'><span className='rating-title'>{rating.Source}</span> <span\r\n                        className='rating-title'>{rating.Value}</span></div>\r\n                    <Progress value={rating.Value.split('/')[0]} total={rating.Value.split('/')[1]} progress={'ratio'}/>\r\n                </>\r\n            )\r\n        }\r\n        if (rating.Value.includes('%')) {\r\n            return (\r\n                <>\r\n                    <div className='rating-title-container'><span className='rating-title'>{rating.Source}</span> <span\r\n                        className='rating-title'>{rating.Value}</span></div>\r\n                    <Progress percent={parseInt(rating.Value)} progress/>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    useEffect(() => {\r\n    })\r\n    return (\r\n        <div>\r\n            {\r\n                calcRating(props.rating)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieRating;","import React, {useEffect, useState} from \"react\";\r\nimport './style.scss';\r\nimport WithLoader from \"../../Components/WithLoader\";\r\nimport {getMovieDetail} from \"../../Services/movieServices\";\r\nimport MovieRating from \"../../Components/MovieRating\";\r\n\r\n\r\nconst MovieDetail = props =>{\r\n    const [movieDetail, setMovieDetail] = useState({});\r\n    const { setLoading } = props;\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        getMovieDetail(props.match.params.id).then(res => {\r\n            setMovieDetail(res.data);\r\n            setLoading(false);\r\n        })\r\n    }, [props.id])\r\n    return (\r\n        <>\r\n            <div className='movie-detail-container'>\r\n                <div className=\"movie-img\">\r\n                    <img src={movieDetail?.Poster} alt=\"\"/>\r\n                </div>\r\n                <div className=\"detail\">\r\n                    <strong className='title'>{movieDetail?.Title}</strong>\r\n                    <span className=\"title-detail\">Year: {movieDetail?.Year}</span>\r\n                    <span className=\"title-detail\">Released: {movieDetail?.Released}</span>\r\n                    <span className=\"title-detail\">Direction: {movieDetail?.Director}</span>\r\n                    <span className=\"title-detail\">Genre: {movieDetail?.Genre}</span>\r\n                    <strong className='other-title'>Actors</strong>\r\n                    <span>{movieDetail?.Actors}</span>\r\n                    <strong className='other-title'>Plot</strong>\r\n                    <span>{movieDetail?.Plot}</span>\r\n                    <strong className='other-title'>Rating</strong>\r\n                    {\r\n                        movieDetail.Ratings && movieDetail?.Ratings.map((item, index) => {\r\n                            return (\r\n                                <MovieRating rating={item} key={index}/>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WithLoader(MovieDetail, 'Get Movies Detail...');","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\nimport MainPage from \"./Pages/MainPage/MainPage\";\r\nimport MovieDetail from \"./Pages/MovieDetail/MoviesDetail\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path='/' component={MainPage}/>\r\n          <Route exact path='/movie/detail/:id' component={MovieDetail}/>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/loading.822699a4.gif\";"],"sourceRoot":""}